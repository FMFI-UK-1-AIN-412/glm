#!/usr/bin/env python3

import sys

from cli.info import info_handler
from cli.init import init_handler
from cli.generate import generate_handler
from cli.pull import pull_handler
from cli.pulls import pulls_handler
from cli.checkout import checkout_handler
from cli.report import report_handler
from cli.distribute import distribute_handler
from cli.test import test_handler
from cli.worklist import worklist_handler
from errors import GLMException


def print_help():
    print("usage: glm <command> [<args>]\n")
    print("commands:")
    print_command_with_description("init", "Initialize glm directory")
    print_command_with_description("generate", "Generate students")
    print_command_with_description("info", "Print information about glm directory")
    print_command_with_description("pull", "Operations on checked out PR")
    print_command_with_description("checkout", "Checkout student PR")
    print_command_with_description("pulls", "Pull requests manipulation")
    print_command_with_description("report", "Generate and push report for students")
    print_command_with_description("test", "Test if glm is setup correctly")
    print_command_with_description("worklist", "Worklist related functions")


HELP_BUFFER = 15
TAB_LENGTH = 2


def print_command_with_description(command: str, description: str):
    spaces_count = HELP_BUFFER - TAB_LENGTH - len(command)
    print(f"{' ' * TAB_LENGTH}{command}{' ' * spaces_count}{description}")


args = sys.argv

try:
    if len(args) == 1 or args[1] == "-h" or args[1] == "--help":
        print_help()
    else:
        command, arguments = args[1], args[2:]
        if command == "init":
            init_handler(arguments)
        elif command == "generate":
            generate_handler(arguments)
        elif command == "info":
            info_handler(arguments)
        elif command == "pull":
            pull_handler(arguments)
        elif command == "pulls":
            pulls_handler(arguments)
        elif command == "checkout":
            checkout_handler(arguments)
        elif command == "report":
            report_handler(arguments)
        elif command == "distribute":
            distribute_handler(arguments)
        elif command == "test":
            test_handler(arguments)
        elif command == "worklist":
            worklist_handler(arguments)
        else:
            print(f"glm: '{command}' is not a glm command. See 'glm --help'.")
except GLMException as error:
    error.show()
