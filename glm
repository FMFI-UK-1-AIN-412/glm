#!/usr/bin/env python3

import argparse

from errors import GLMException
from remote.context import Context
from cli.pull_request import pulls_handle, pulls_comment_handle, pulls_checkout_handle
from cli.init import handle_args as init_handle_args
from cli.generate import handle_args as generate_handle_args
from cli.report import handle_args as report_handle_args

context = Context()


def testing(args):
    from remote.repository.utils import distribute_branch

    distribute_branch(context, "zadanie01")


parser = argparse.ArgumentParser(
    prog="glm", description="Git learning management system",
)
subparsers = parser.add_subparsers()

# generate subparser
generate_parser = subparsers.add_parser(
    "generate",
    help="""
    Command for generating students
""",
)
generate_parser.add_argument(
    "file_path", action="store", type=str, help="file for generating students"
)
generate_parser.set_defaults(func=generate_handle_args)

# init subparser
init_parser = subparsers.add_parser(
    "init", help="Command used for setting up the environment"
)
init_parser.set_defaults(func=init_handle_args)


# pull request
pulls_parser = subparsers.add_parser("pulls", help="Pull request manipulation")
pulls_parser.add_argument("--local", "-l", action="store_true")
pulls_parser.add_argument("--remote", "-r", action="store_true")
pulls_parser.set_defaults(func=pulls_handle)
pulls_sub_parsers = pulls_parser.add_subparsers()
# Pull request - comment
pulls_sub_parsers_comment = pulls_sub_parsers.add_parser("comment")
pulls_sub_parsers_comment.add_argument("message", action="store", type=str)
pulls_sub_parsers_comment.set_defaults(func=pulls_comment_handle)
# Pull request - checkout
pulls_sub_parsers_checkout = pulls_sub_parsers.add_parser("checkout")
pulls_sub_parsers_checkout.add_argument("checkout", action="extend", nargs=2, type=str)
pulls_sub_parsers_checkout.set_defaults(func=pulls_checkout_handle)

# report subparser
report_parser = subparsers.add_parser(
    "report",
    help="""
    Generate and push report for students
""",
)
report_parser.add_argument(
    "report_command",
    action="store",
    type=str,
    help="Executable file that generates reports for students",
)
report_parser.set_defaults(func=report_handle_args)

# for testing
testing_parser = subparsers.add_parser(
    "test", help="Dirty testing, tries pushing branch testing-branch to all students"
)
testing_parser.set_defaults(func=testing)

args = parser.parse_args()

try:
    if hasattr(args, "func"):
        args.func(args)
    else:
        parser.print_help()
except GLMException as error:
    error.show()
