#!/usr/local/bin/python3

import argparse

from remote.context import Context

context = Context()


def generate(args):
    from student.utils import generate_students

    file_path = args.file_path
    students = generate_students(context, file_path)
    context.organization.create_repositories(students)


def init(args):
    print(
        "Either type in the correct value or if you want to skip or have already filled in the value press Enter"
    )
    print("Type in organization name or press Enter to skip")
    from core.config_loader import get_local_config_path

    local_config_path = get_local_config_path()
    organization_name = input("")
    if organization_name != "":
        try:
            file_path = f"{local_config_path}/organization_name"
            with open(file_path, "w") as f:
                f.write(organization_name + "\n")
            print(f"Writing to {file_path}")
        except IOError:
            print("Failed")

    print("Type in the name of template repository to use or press Enter to skip")
    template_name = input("")
    if template_name != "":
        try:
            file_path = f"{local_config_path}/template_repository_name"
            with open(file_path, "w") as f:
                f.write(template_name + "\n")
            print(f"Writing to {file_path}")
        except IOError:
            print("Failed")

    print("Type in user repository prefix or press Enter to skip")
    user_repository_prefix = input("")
    if user_repository_prefix != "":
        try:
            file_path = f"{local_config_path}/user_repository_prefix"
            with open(file_path, "w") as f:
                f.write(user_repository_prefix + "\n")
            print(f"Writing to {file_path}")
        except IOError:
            print("Failed")


def testing(args):
    from remote.repository.utils import distribute_branch

    distribute_branch(context, "testing-branch")


parser = argparse.ArgumentParser(
    prog="glm", description="Git learning management system",
)
subparsers = parser.add_subparsers()

# generate subparser
generate_parser = subparsers.add_parser(
    "generate",
    help="""
    Command for generating students
""",
)
generate_parser.add_argument(
    "file_path", action="store", type=str, help="file for generating students"
)
generate_parser.set_defaults(func=generate)

# init subparser
init_parser = subparsers.add_parser(
    "init", help="Command used for setting up the environment"
)
init_parser.set_defaults(func=init)

# for testing
testing_parser = subparsers.add_parser(
    "test", help="Dirty testing, tries pushing branch testing-branch to all students"
)
testing_parser.set_defaults(func=testing)

args = parser.parse_args()
if hasattr(args, "func"):
    args.func(args)
