#!/usr/bin/env python3

import sys

from cli.info import info_handler
from cli.init import init_handler
from cli.generate import generate_handler
from cli.pull import pull_handler
from cli.pulls import pulls_handler
from cli.checkout import checkout_handler
from cli.report import report_handler
from cli.distribute import distribute_handler
from cli.test import test_handler
from errors import GLMException


def print_help():
    print("usage: glm <command> [<args>]\n")
    print("commands:")
    print_command_with_description("init", "Initialize glm directory")
    print_command_with_description("generate", "Generate students")
    print_command_with_description("info", "Print information about glm directory")
    print_command_with_description("pull", "Operations on checked out PR")
    print_command_with_description("checkout", "Checkout student PR")
    print_command_with_description("pulls", "Pull requests manipulation")
    print_command_with_description("test", "Test if glm is setup correctly")


HELP_BUFFER = 15
TAB_LENGTH = 2


def print_command_with_description(command: str, description: str):
    spaces_count = HELP_BUFFER - TAB_LENGTH - len(command)
    print(f"{' ' * TAB_LENGTH}{command}{' ' * spaces_count}{description}")


args = sys.argv

try:
    if len(args) == 1 or args[1] == "-h" or args[1] == "--help":
        print_help()
    elif args[1] == "init":
        init_handler(args[2:])
    elif args[1] == "generate":
        generate_handler(args[2:])
    elif args[1] == "info":
        info_handler(args[2:])
    elif args[1] == "pull":
        pull_handler(args[2:])
    elif args[1] == "pulls":
        pulls_handler(args[2:])
    elif args[1] == "checkout":
        checkout_handler(args[2:])
    elif args[1] == "report":
        report_handler(args[2:])
    elif args[1] == "distribute":
        distribute_handler(args[2:])
    elif args[1] == "test":
        test_handler(args[2:])
    else:
        print(f"glm: '{args[1]}' is not a glm command. See 'glm --help'.")
except GLMException as error:
    error.show()
